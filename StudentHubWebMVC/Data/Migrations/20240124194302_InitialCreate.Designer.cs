// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentHubWebMVC.Data;

#nullable disable

namespace StudentHubWebMVC.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240124194302_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StudentHubWebMVC.Models.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("StudentHubWebMVC.Models.Entities.Campus", b =>
                {
                    b.Property<int>("IDCampus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDCampus"));

                    b.Property<string>("Localita")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeCampus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDCampus");

                    b.ToTable("Campus");
                });

            modelBuilder.Entity("StudentHubWebMVC.Models.Entities.Corso", b =>
                {
                    b.Property<int>("IDCorso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDCorso"));

                    b.Property<int>("CreditiTotaliCorso")
                        .HasColumnType("int");

                    b.Property<int>("Durata")
                        .HasColumnType("int");

                    b.Property<int>("IDDipartimento")
                        .HasColumnType("int");

                    b.Property<int>("IDTipoCorso")
                        .HasColumnType("int");

                    b.Property<string>("NomeCorso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDCorso");

                    b.HasIndex("IDDipartimento");

                    b.HasIndex("IDTipoCorso");

                    b.ToTable("Corsi");
                });

            modelBuilder.Entity("StudentHubWebMVC.Models.Entities.Dipartimento", b =>
                {
                    b.Property<int>("IDDipartimento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDDipartimento"));

                    b.Property<int>("IDFacolta")
                        .HasColumnType("int");

                    b.Property<string>("NomeDipartimento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDDipartimento");

                    b.HasIndex("IDFacolta");

                    b.ToTable("Dipartimeti");
                });

            modelBuilder.Entity("StudentHubWebMVC.Models.Entities.Facolta", b =>
                {
                    b.Property<int>("IDFacolta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDFacolta"));

                    b.Property<string>("NomeFacolta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDFacolta");

                    b.ToTable("Facolta");
                });

            modelBuilder.Entity("StudentHubWebMVC.Models.Entities.Materia", b =>
                {
                    b.Property<int>("IDMateria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDMateria"));

                    b.Property<int>("AnnoUniversitario")
                        .HasColumnType("int");

                    b.Property<string>("CodiceMateria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreditiMateria")
                        .HasColumnType("int");

                    b.Property<int>("IDDipartimento")
                        .HasColumnType("int");

                    b.Property<int>("IDSettoreScientificoDisciplinare")
                        .HasColumnType("int");

                    b.Property<string>("NomeMateria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroOre")
                        .HasColumnType("int");

                    b.HasKey("IDMateria");

                    b.HasIndex("IDDipartimento");

                    b.HasIndex("IDSettoreScientificoDisciplinare");

                    b.ToTable("Materie");
                });

            modelBuilder.Entity("StudentHubWebMVC.Models.Entities.SettoreScientificoDisciplinare", b =>
                {
                    b.Property<int>("IDSettoreScientificoDisciplinare")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDSettoreScientificoDisciplinare"));

                    b.Property<string>("CodiceSettoreScientificoDisciplinare")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeSettoreScientificoDisciplinare")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDSettoreScientificoDisciplinare");

                    b.ToTable("SettoriScientificiDisciplinari");
                });

            modelBuilder.Entity("StudentHubWebMVC.Models.Entities.Studente", b =>
                {
                    b.Property<int>("IDStudente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDStudente"));

                    b.Property<string>("AnnoUniversitario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CognomeStudente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataNascita")
                        .HasColumnType("datetime2");

                    b.Property<int>("IDCampus")
                        .HasColumnType("int");

                    b.Property<int>("IDCorso")
                        .HasColumnType("int");

                    b.Property<string>("LuogoNascita")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeStudente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specializzazione")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDStudente");

                    b.HasIndex("IDCampus");

                    b.HasIndex("IDCorso");

                    b.ToTable("Studenti");
                });

            modelBuilder.Entity("StudentHubWebMVC.Models.Entities.TipoCorso", b =>
                {
                    b.Property<int>("IDTipoCorso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDTipoCorso"));

                    b.Property<string>("TipoCorsoNome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDTipoCorso");

                    b.ToTable("TipiCorso");
                });

            modelBuilder.Entity("StudentHubWebMVC.Models.Entities.VotoMateria", b =>
                {
                    b.Property<int>("IDVoto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDVoto"));

                    b.Property<DateTime>("DataRegistrazioneVotoMateria")
                        .HasColumnType("datetime2");

                    b.Property<int>("IDMateria")
                        .HasColumnType("int");

                    b.Property<int>("IDStudente")
                        .HasColumnType("int");

                    b.Property<int>("VotoMateriaValue")
                        .HasColumnType("int");

                    b.HasKey("IDVoto");

                    b.HasIndex("IDMateria");

                    b.HasIndex("IDStudente");

                    b.ToTable("VotiMateria");
                });

            modelBuilder.Entity("StudentHubWebMVC.Models.Entities.VotoTesi", b =>
                {
                    b.Property<int>("IDVotoTesi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDVotoTesi"));

                    b.Property<DateTime>("DataRegistrazioneVotoTesi")
                        .HasColumnType("datetime2");

                    b.Property<int>("IDStudente")
                        .HasColumnType("int");

                    b.Property<int>("VotoTesiValue")
                        .HasColumnType("int");

                    b.HasKey("IDVotoTesi");

                    b.HasIndex("IDStudente")
                        .IsUnique();

                    b.ToTable("VotiTesi");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StudentHubWebMVC.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StudentHubWebMVC.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentHubWebMVC.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StudentHubWebMVC.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentHubWebMVC.Models.Entities.Corso", b =>
                {
                    b.HasOne("StudentHubWebMVC.Models.Entities.Dipartimento", "Dipartimento")
                        .WithMany("Corsi")
                        .HasForeignKey("IDDipartimento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentHubWebMVC.Models.Entities.TipoCorso", "TipoCorso")
                        .WithMany("Corsi")
                        .HasForeignKey("IDTipoCorso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dipartimento");

                    b.Navigation("TipoCorso");
                });

            modelBuilder.Entity("StudentHubWebMVC.Models.Entities.Dipartimento", b =>
                {
                    b.HasOne("StudentHubWebMVC.Models.Entities.Facolta", "Facolta")
                        .WithMany("Dipartimenti")
                        .HasForeignKey("IDFacolta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facolta");
                });

            modelBuilder.Entity("StudentHubWebMVC.Models.Entities.Materia", b =>
                {
                    b.HasOne("StudentHubWebMVC.Models.Entities.Dipartimento", "Dipartimento")
                        .WithMany("Materie")
                        .HasForeignKey("IDDipartimento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentHubWebMVC.Models.Entities.SettoreScientificoDisciplinare", "SettoreScientificoDisciplinare")
                        .WithMany("Materie")
                        .HasForeignKey("IDSettoreScientificoDisciplinare")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dipartimento");

                    b.Navigation("SettoreScientificoDisciplinare");
                });

            modelBuilder.Entity("StudentHubWebMVC.Models.Entities.Studente", b =>
                {
                    b.HasOne("StudentHubWebMVC.Models.Entities.Campus", "Campus")
                        .WithMany("Studenti")
                        .HasForeignKey("IDCampus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentHubWebMVC.Models.Entities.Corso", "Corso")
                        .WithMany("Studenti")
                        .HasForeignKey("IDCorso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");

                    b.Navigation("Corso");
                });

            modelBuilder.Entity("StudentHubWebMVC.Models.Entities.VotoMateria", b =>
                {
                    b.HasOne("StudentHubWebMVC.Models.Entities.Materia", "Materia")
                        .WithMany("VotiMateria")
                        .HasForeignKey("IDMateria")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentHubWebMVC.Models.Entities.Studente", "Studente")
                        .WithMany("VotiMateriaStudente")
                        .HasForeignKey("IDStudente")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Materia");

                    b.Navigation("Studente");
                });

            modelBuilder.Entity("StudentHubWebMVC.Models.Entities.VotoTesi", b =>
                {
                    b.HasOne("StudentHubWebMVC.Models.Entities.Studente", "Studente")
                        .WithOne("VotoTesi")
                        .HasForeignKey("StudentHubWebMVC.Models.Entities.VotoTesi", "IDStudente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Studente");
                });

            modelBuilder.Entity("StudentHubWebMVC.Models.Entities.Campus", b =>
                {
                    b.Navigation("Studenti");
                });

            modelBuilder.Entity("StudentHubWebMVC.Models.Entities.Corso", b =>
                {
                    b.Navigation("Studenti");
                });

            modelBuilder.Entity("StudentHubWebMVC.Models.Entities.Dipartimento", b =>
                {
                    b.Navigation("Corsi");

                    b.Navigation("Materie");
                });

            modelBuilder.Entity("StudentHubWebMVC.Models.Entities.Facolta", b =>
                {
                    b.Navigation("Dipartimenti");
                });

            modelBuilder.Entity("StudentHubWebMVC.Models.Entities.Materia", b =>
                {
                    b.Navigation("VotiMateria");
                });

            modelBuilder.Entity("StudentHubWebMVC.Models.Entities.SettoreScientificoDisciplinare", b =>
                {
                    b.Navigation("Materie");
                });

            modelBuilder.Entity("StudentHubWebMVC.Models.Entities.Studente", b =>
                {
                    b.Navigation("VotiMateriaStudente");

                    b.Navigation("VotoTesi")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentHubWebMVC.Models.Entities.TipoCorso", b =>
                {
                    b.Navigation("Corsi");
                });
#pragma warning restore 612, 618
        }
    }
}
